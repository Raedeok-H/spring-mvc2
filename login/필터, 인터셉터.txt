** 필터, 인터셉터
    서블릿 필터 - 서블릿이 제공
    스프링 인터셉터 - 스프링이 제공

    ** 스프링 MVC를 사용하고 있고,
       스프링의 기능을 최대한 활용하려면 스프링 인터셉터를 사용하는 것이 좋다
       스프링을 사용하지 않는다면 서블릿 필터가 유일한 선택지가 될 것이긴 하다.
    - 필터와 인터셉터의 목적은 공통적으로 수행되어야하는 작업을 중앙에서 처리하게 하는 것이다.
    * AOP 를 도입하여도 되지만, 웹과 관련되어있기 때문에 서블릿 필터나 스프링 인터셉터의 사용이 더 좋다.

    현재 로그인 하지 않은 사용자도 상품 관련 페이지에 들어갈 수 있다.
    각 컨트롤러마다 로그인 체크를 각각 해주면 된다.

** 필터 소개

    ** 필터 흐름
       HTTP 요청 -> WAS -> 필터 -> 서블릿 -> 컨트롤러

    ** 필터 제한
       HTTP 요청 -> WAS -> 필터 -> 서블릿 -> 컨트롤러 //로그인 사용자
       HTTP 요청 -> WAS -> 필터(적절하지 않은 요청이라 판단, 서블릿 호출X) //비 로그인 사용자

    ** 필터 체인(여러개도 가능하다 ex) log 관련, login 관련 ... 등)
      HTTP 요청 -> WAS -> 필터1 -> 필터2 -> 필터3 -> 서블릿 -> 컨트롤러


    ** 참고
       @ServletComponentScan @WebFilter(filterName = "logFilter", urlPatterns = "/*") 로 필터 등록이 가능하지만 필터 순서 조절이 안된다.
       따라서 FilterRegistrationBean 을 사용하자.

       실무에서 HTTP 요청시 같은 요청의 로그에 모두 같은 식별자를 자동으로 남기는 방법은 logback mdc로 검색
       해보자.


    ** 참고
        필터에는 다음에 설명할 스프링 인터셉터는 제공하지 않는, 아주 강력한 기능이 있는데
        chain.doFilter(request, response); 를 호출해서 다음 필터 또는 서블릿을 호출할 때
        request , response 를 다른 객체로 바꿀 수 있다.
        ServletRequest , ServletResponse 를 구현한 다른 객체를 만들어서 넘기면 해당 객체가 다음 필터 또는 서블릿에서 사용된다.
        잘 사용하는 기능은 아니니 참고만 해두자.





** 인터셉터 소개
    - 스프링 인터셉터는 서블릿 필터보다 편리하고, 더 정교하고 다양한 기능을 지원한다.

    ** 인터셉터 흐름
        HTTP 요청 -> WAS -> 필터 -> 서블릿 -> "스프링 인터셉터" -> 컨트롤러
      - 디스패처 서블릿과 컨트롤러 사이에서 컨트롤러 호출 직전에 호출

    ** 인터셉터 제한
        HTTP 요청 -> WAS -> 필터 -> 서블릿 -> 스프링 인터셉터 -> 컨트롤러 //로그인 사용자
        HTTP 요청 -> WAS -> 필터 -> 서블릿 -> 스프링 인터셉터(적절하지 않은 요청이라 판단, 컨트롤러 호출X) // 비 로그인 사용자


    ** 인터셉터 체인
        HTTP 요청 -> WAS -> 필터 -> 서블릿 -> 인터셉터1 -> 인터셉터2 -> 컨트롤러
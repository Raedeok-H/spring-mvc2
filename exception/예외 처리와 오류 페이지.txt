스프링이 아닌 순수 서블릿 컨테이너는 예외를 어떻게 처리하는지 알아보자.

** 서블릿은 다음 2가지 방식으로 예외 처리를 지원한다.
    1. Exception (예외)
    2. response.sendError(HTTP 상태 코드, 오류 메시지)

** Exception(예외)
   자바 직접 실행
       자바의 메인 메서드를 직접 실행하는 경우 main 이라는 이름의 쓰레드가 실행된다.
       실행 도중에 예외를 잡지 못하고 처음 실행한 main() 메서드를 넘어서 예외가 던져지면,
       예외 정보를 남기고 해당 쓰레드는 종료된다
          - 그냥 Exception 으로 WAS 까지 전달되면, 톰캣이 기본 제공하는
           HTTP Status 500 – Internal Server Error 으로 나온다.


   웹 애플리케이션
       웹 애플리케이션은 사용자 요청별로 별도의 쓰레드가 할당되고, 서블릿 컨테이너 안에서 실행된다.

       애플리케이션에서 예외가 발생했는데, 어디선가 try ~ catch로 예외를 잡아서 처리하면 아무런 문제가 없다.
       그런데 만약에 애플리케이션에서 예외를 잡지 못하고,
       서블릿 밖으로 까지 예외가 전달되면 어떻게 동작할까?

       아래같은 상황
           WAS(여기까지 전파) <- 필터 <- 서블릿 <- 인터셉터 <- 컨트롤러(예외발생)

       - 결국 톰캣 같은 WAS 까지 예외가 전달된다.

       WAS는 예외가 올라오면 어떻게 처리해야 할까?

       ** 2. sendError 흐름
       WAS(sendError 호출 기록 확인) <- 필터 <- 서블릿 <- 인터셉터 <- 컨트롤러(response.sendError())
           response.sendError() 를 호출하면 response 내부에는 오류가 발생했다는 상태를 저장해둔다.
           그리고 서블릿 컨테이너는 고객에게 응답 전에 response 에 sendError() 가 호출되었는지 확인한다.
           그리고 호출 되었다면 설정한 오류 코드에 맞추어 기본 오류 페이지를 보여준다.



** 오류 페이지 작동 원리
    ** 예외 발생과 오류 페이지 요청 흐름
       1. WAS(여기까지 전파) <- 필터 <- 서블릿 <- 인터셉터 <- 컨트롤러(예외발생)
       2. WAS `/error-page/500` 다시 요청 -> 필터 -> 서블릿 -> 인터셉터 -> 컨트롤러(/error-page/500)-> View

       - 중요한 점은 웹 브라우저(클라이언트)는 서버 내부에서 이런 일이 일어나는지 전혀 모른다는 점이다.
         오직 서버 내부에서 오류 페이지를 찾기 위해 추가적인 호출을 한다.

    ** 오류 정보 추가
       WAS는 오류 페이지를 단순히 다시 요청만 하는 것이 아니라,
       오류 정보를 request 의 attribute 에 추가해서 넘겨준다.
       필요하면 오류 페이지에서 이렇게 전달된 오류 정보를 사용할 수 있다.
** 컨버전 서비스 - ConversionService
      이렇게 타입 컨버터를 하나하나 직접 찾아서 타입 변환에 사용하는 것은 매우 불편하다.
      그래서 스프링은 개별 컨버터를 모아두고 그것들을 묶어서 편리하게 사용할 수 있는 기능을 제공하는데,
      이것이 바로 컨버전 서비스 ( ConversionService )이다.

      등록과 사용 분리
          컨버터를 등록할 때는 StringToIntegerConverter 같은 타입 컨버터를 명확하게 알아야 한다.
          반면에 컨버터를 사용하는 입장에서는 타입 컨버터를 전혀 몰라도 된다.
          타입 컨버터들은 모두 컨버전 서비스 내부에 숨어서 제공된다.
          따라서 타입을 변환을 원하는 사용자는 컨버전 서비스 인터페이스에만 의존하면 된다.
          물론 컨버전 서비스를 등록하는 부분과 사용하는 부분을 분리하고 의존관계 주입을 사용해야 한다.

      인터페이스 분리 원칙 - ISP(Interface Segregation Principle)
          인터페이스 분리 원칙은 클라이언트가 자신이 이용하지 않는 메서드에 의존하지 않아야 한다.
          해당 원칙이 적용되어 있다.

      DefaultConversionService 는 다음 두 인터페이스를 구현했다.
          ConversionService : 컨버터 사용에 초점
          ConverterRegistry : 컨버터 등록에 초점
        - 스프링에서는 많은 코드들이 이런방식으로 구현되어 있다.


** 포맷터 - Formatter
       Converter 는 입력과 출력 타입에 제한이 없는, 범용 타입 변환 기능을 제공한다.
       이번에는 일반적인 웹 애플리케이션 환경을 생각해보자.
       불린 타입을 숫자로 바꾸는 것 같은 범용 기능 보다는 개발자 입장에서는 문자를 다른 타입으로 변환하거나,
       다른 타입을 문자로 변환하는 상황이 대부분이다.
       앞서 살펴본 예제들을 떠올려 보면 문자를 다른 객체로 변환하거나 객체를 문자로 변환하는 일이 대부분이다.

       예시
            화면에 숫자를 출력해야 하는데,
            Integer String 출력 시점에 숫자 1000 문자 "1,000" 이렇게 1000 단위에 쉼표를 넣어서 출력하거나,
            또는 "1,000" 라는 문자를 1000 이라는 숫자로 변경해야 한다.
            날짜 객체를 문자인 "2021-01-01 10:50:11" 와 같이 출력하거나 또는 그 반대의 상황


       ** Converter vs Formatter
              Converter 는 범용(객체 객체)
              Formatter 는 문자에 특화(객체 문자, 문자 객체) + 현지화(Locale)
                  Converter 의 특별한 버전


** 포맷터를 지원하는 컨버전 서비스
       컨버전 서비스에는 컨버터만 등록할 수 있고, 포맷터를 등록할 수 는 없다.
       그런데 생각해보면 포맷터는 객체 문자, 문자 객체로 변환하는 특별한 컨버터일 뿐이다.
       포맷터를 지원하는 컨버전 서비스를 사용하면 컨버전 서비스에 포맷터를 추가할 수 있다.

       내부에서 어댑터 패턴을 사용해서 Formatter 가 Converter 처럼 동작하도록 지원한다.
       FormattingConversionService 는 포맷터를 지원하는 컨버전 서비스이다.

       DefaultFormattingConversionService 는 FormattingConversionService 에
       기본적인 통화, 숫자 관련 몇가지 기본 포맷터를 추가해서 제공한다.



** 스프링이 제공하는 기본 포맷터
        @NumberFormat : 숫자 관련 형식 지정 포맷터 사용, NumberFormatAnnotationFormatterFactory
        @DateTimeFormat : 날짜 관련 형식 지정 포맷터 사용, Jsr310DateTimeFormatAnnotationFormatterFactory


** 정리
    컨버터를 사용하든, 포맷터를 사용하든 등록 방법은 다르지만,
    사용할 때는 컨버전 서비스를 통해서 일관성 있게 사용할 수 있다.

    !!- 주의 -!!
    메시지 컨버터( HttpMessageConverter )에는 컨버전 서비스가 적용되지 않는다. (ex) @ResponseBody)
    특히 객체를 JSON으로 변환할 때 메시지 컨버터를 사용하면서 이 부분을 많이 오해하는데,
    HttpMessageConverter 의 역할은 HTTP 메시지 바디의 내용을 객체로 변환하거나 객체를 HTTP 메시지 바디에 입력하는 것이다.

    예를 들어서 JSON을 객체로 변환하는 메시지 컨버터는 내부에서 Jackson 같은 라이브러리를 사용한다.
    객체를 JSON으로 변환한다면 그 결과는 이 라이브러리에 달린 것이다.
    따라서 JSON 결과로 만들어지는 숫자나 날짜 포맷을 변경하고 싶으면 해당 라이브러리가 제공하는 설정을 통해서 포맷을 지정해야 한다.
    결과적으로 이것은 컨버전 서비스와 전혀 관계가 없다.

    컨버전 서비스는 @RequestParam , @ModelAttribute , @PathVariable , 뷰 템플릿 등에서 사용할 수 있다.